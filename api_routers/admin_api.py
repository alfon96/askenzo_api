from fastapi import HTTPException, status, APIRouter, Depends
from utility.authentication_data import Authentication
import jwt
from sqlalchemy.orm import Session
import datetime
from datetime import timedelta
import schemas
import utility.authentication_data as auth
import crud
from database import get_db

admin = APIRouter(tags=["Admin"], prefix="/admin")

from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


def authenticate_admin(username: str, password: str):
    """
    The function `authenticate_admin` checks if the provided username and password match the stored
    admin credentials.
    
    \n**param** username: A string representing the username that needs to be authenticated
    **type** username: str
    \n**param** password: The `password` parameter is a string that represents the password entered by the
    user for authentication
    **type** password: str
    \n**return**: The function `authenticate_admin` returns `True` if the `username` and `password`
    parameters match the values stored in the `Authentication` class's `username` and `password`
    attributes. Otherwise, it returns `False`.
    """
    return (
        True
        if username == Authentication.username and password == Authentication.password
        else False
    )


def create_jwt(payload: dict):
    """
    The function `create_jwt` takes a payload dictionary, adds an expiration date to it, encodes it
    using a secret key, and returns the encoded JWT.
    
    \n**param** payload: The `payload` parameter is a dictionary that contains the data that you want to
    include in the JWT (JSON Web Token). This data can be any information that you want to securely
    transmit between parties, such as user information or authorization details
    **type** payload: dict
    \n**return**: the encoded JWT (JSON Web Token).
    """
    expiration_days = Authentication.expiration_days
    expiration = datetime.datetime.utcnow() + timedelta(days=expiration_days)
    payload["exp"] = expiration
    try:
        encoded_jwt = jwt.encode(payload, Authentication.secret_key, algorithm="HS256")
        return encoded_jwt
    except Exception as e:
        print(str(e))


    """
    The function `is_jwt_valid` checks if a JWT token is valid by decoding it and handling various
    exceptions.
    
    \n**param** token: The `token` parameter is a string that represents a JSON Web Token (JWT)
    **type** token: str
    \n**return**: The function is_jwt_valid returns the payload of the JWT token if it is valid and has not
    expired. If the token is expired, it returns None. If there is a decoding error or the token is
    invalid, it also returns None.
    """
def is_jwt_valid(token: str):
    try:
        payload = jwt.decode(token, Authentication.secret_key, algorithms=["HS256"])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.DecodeError as e:
        return None
    except (jwt.InvalidTokenError, jwt.DecodeError):
        return None


@admin.post("/login", response_model=Token)
def login(username: str, password: str):
    """
    The login function checks if the provided username and password are correct and returns an access
    token if authentication is successful, otherwise it raises an HTTPException.
    
    \n**param** username: The `username` parameter is a string that represents the username entered by the
    user during the login process. It is used to identify the user and authenticate their credentials
    **type** username: str
    \n**param** password: The `password` parameter is a string that represents the user's password
    **type** password: str
    \n**return**: a dictionary with two keys: "access_token" and "token_type". The value of "access_token" is
    the token generated by the create_jwt function, and the value of "token_type" is "bearer".
    """
    if authenticate_admin(username=username, password=password):
        token = create_jwt(
            {
                "user_id": -1,
                "role": Authentication.roles[0],
            }
        )
        return {"access_token": token, "token_type": "bearer"}
    else:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )


# Deactivation functions


@admin.patch("/toggle_tourist_activation")
def toggle_tourist_activation(    tourist_id: int,    _=Depends(auth.get_admin_priviledge),    db: Session = Depends(get_db),):
    """
    The function `toggle_tourist_activation` toggles the activation state of a tourist user in a
    database.
    
    \n**param** tourist_id: The `tourist_id` parameter is an integer that represents the ID of the tourist
    user that we want to toggle the activation state for
    **type** tourist_id: int
    \n**param** _: The underscore (_) is used as a placeholder for a variable that is not going to be used in
    the function. In this case, it is used as a placeholder for the "Depends(auth.get_admin_privilege)"
    parameter
    \n**param** db: The `db` parameter is a dependency that represents the database session. It is used to
    interact with the database and perform CRUD operations
    **type** db: Session
    \n**return**: a dictionary with the key "result" and the value being the result of the CRUD update
    operation on the tourist user.
    """
    tourist = crud.get_tourist_user(db=db, user_id=tourist_id)
    if tourist:
        # Toggle the activation state of an user
        if tourist.state_id == 1:
            tourist.state_id = 2
        else:
            tourist.state_id = 1
        return {"result": crud.update(db=db, tourist_user=tourist)}

    else:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Tourist user not found.",
            headers={"WWW-Authenticate": "Bearer"},
        )


@admin.patch("/toggle_host_activation")
def toggle_host_activation(    host_id: int,    _=Depends(auth.get_admin_priviledge),    db: Session = Depends(get_db),):
    """
    The function `toggle_host_activation` toggles the activation state of a host user in a database.
    
    \n**param** host_id: The `host_id` parameter is an integer that represents the ID of the host user that
    we want to toggle the activation state for
    **type** host_id: int
    \n**param** _: The underscore (_) is used as a placeholder variable name. In this case, it is used to
    indicate that the "auth.get_admin_privilege" dependency is not being used in the function
    \n**param** db: The `db` parameter is a dependency injection for the database session. It is used to
    interact with the database and perform CRUD operations
    **type** db: Session
    \n**return**: a dictionary with a single key-value pair. The key is "result" and the value is the result
    of calling the `crud.update` function with the `db` and `host_user` arguments.
    """
    host = crud.get_host_user(db=db, user_id=host_id)
    if host:
        # Toggle the activation state of an host
        if host.state_id == 1:
            host.state_id = 2
        else:
            host.state_id = 1
        return {"result": crud.update(db=db, host_user=host)}

    else:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Host user not found.",
            headers={"WWW-Authenticate": "Bearer"},
        )


@admin.patch("/toggle_experience_activation")
def toggle_experience_activation(    experience_id: int,    _=Depends(auth.get_admin_priviledge),    db: Session = Depends(get_db),):
    """
    The function `toggle_experience_activation` toggles the activation state of an experience in a
    database.
    
    \n**param** experience_id: The `experience_id` parameter is an integer that represents the unique
    identifier of an experience. It is used to retrieve the specific experience from the database
    **type** experience_id: int
    \n**param** _: The underscore (_) is used as a placeholder for a variable that is not going to be used in
    the function. In this case, it is used as a placeholder for the "Depends(auth.get_admin_privilege)"
    parameter
    \n**param** db: The `db` parameter is a dependency injection for the database session. It is used to
    interact with the database and perform CRUD operations
    **type** db: Session
    \n**return**: a dictionary with a key "result" and the value being the result of the `crud.update()`
    function.
    """
    experience = crud.get_experience(db=db, experience_id=experience_id)
    if experience:
        # Toggle the activation state of an experience
        if experience.state_id == 1:
            experience.state_id = 2
        else:
            experience.state_id = 1
        return {
            "result": crud.update(
                db=db,
            )
        }

    else:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Experience not found.",
            headers={"WWW-Authenticate": "Bearer"},
        )


@admin.patch("/toggle_discovery_activation")
def toggle_discovery_activation(    discovery_id: int,    _=Depends(auth.get_admin_priviledge),    db: Session = Depends(get_db),):
    """
    The function `toggle_discovery_activation` toggles the activation state of a discovery experience in
    a database.
    
    \n**param** discovery_id: The `discovery_id` parameter is an integer that represents the ID of the
    discovery that needs to be toggled
    **type** discovery_id: int
    \n**param** _: The underscore (_) in the function signature is used as a placeholder for a variable that
    is not going to be used. In this case, it is used to indicate that the "Depends" function is being
    called with the "auth.get_admin_privilege" function as an argument, but the result of
    \n**param** db: The `db` parameter is a dependency injection for the database session. It is used to
    interact with the database and perform CRUD operations
    **type** db: Session
    \n**return**: a dictionary with a key "result" and the value being the result of the `crud.update()`
    function.
    """
    discovery = crud.get_discovery(db=db, discovery_id=discovery_id)
    if discovery:
        # Toggle the activation state of an experience
        if discovery.state_id == 1:
            discovery.state_id = 2
        else:
            discovery.state_id = 1
        return {
            "result": crud.update(
                db=db,
            )
        }

    else:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Discovery not found.",
            headers={"WWW-Authenticate": "Bearer"},
        )
